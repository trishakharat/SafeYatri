version: '3.8'

services:
  # SafeYatri Backend
  safeyatri-backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - SECRET_KEY=${SECRET_KEY:-safeyatri-secret-key-2024}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-jwt-secret-key-2024}
      - EMAIL_SENDER=${EMAIL_SENDER:-alerts@safeyatri.gov.in}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD:-your-email-password}
      - EMAIL_RECEIVER=${EMAIL_RECEIVER:-emergency@safeyatri.gov.in}
      - SENTRY_DSN=${SENTRY_DSN:-}
    volumes:
      - ./uploads:/app/uploads
      - ./static/saved_clips:/app/static/saved_clips
      - ./backend/detection:/app/backend/detection
    depends_on:
      - redis
      - postgres
    networks:
      - safeyatri-network
    restart: unless-stopped

  # Inference service (demo publisher)
  inference_service:
    image: python:3.11-slim
    working_dir: /service
    environment:
      - BACKEND_URL=http://safeyatri-backend:5000
      - CAMERA_ID=demo_camera_001
      - DETECTION_INTERVAL=12
    volumes:
      - ./inference_service:/service
    command: sh -c "pip install -r requirements.txt && python main.py"
    depends_on:
      - safeyatri-backend
    networks:
      - safeyatri-network
    restart: unless-stopped

  # MinIO (S3-compatible)
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - safeyatri-network
    restart: unless-stopped

  # Node exporter for Prometheus
  node-exporter:
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"
    networks:
      - safeyatri-network
    restart: unless-stopped

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    # no host port mapping for redis (internal only)
    volumes:
      - redis_data:/data
    networks:
      - safeyatri-network
    restart: unless-stopped

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=safeyatri
      - POSTGRES_USER=safeyatri
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-safeyatri2024}
    # no host port mapping for postgres (internal only)
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - safeyatri-network
    restart: unless-stopped

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - safeyatri-network
    restart: unless-stopped

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - safeyatri-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Frontend (React dev server for demo)
  frontend:
    image: node:18-alpine
    working_dir: /app
    command: sh -c "npm install && npm start"
    environment:
      - CHOKIDAR_USEPOLLING=true
      - CI=false
      - REACT_APP_WS_URL=http://localhost
      - HOST=0.0.0.0
    volumes:
      - ./frontend:/app
    networks:
      - safeyatri-network
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./frontend/build:/usr/share/nginx/html:ro
    depends_on:
      - safeyatri-backend
      - frontend
    networks:
      - safeyatri-network
    restart: unless-stopped

  # Kafka for event streaming (optional)
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - safeyatri-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - safeyatri-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  minio_data:

networks:
  safeyatri-network:
    driver: bridge
